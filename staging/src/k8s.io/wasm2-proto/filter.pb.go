// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.21.7
// source: proto/filter.proto

package proto

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing the user's name.
type FilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pod      *v1.Pod `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
	NodeName string  `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *FilterRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *FilterRequest) GetPod() *v1.Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *FilterRequest) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

// The reply message containing the greetings
type FilterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It corresponds to framework.Code.
	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Reason     string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *FilterReply) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *FilterReply) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FilterReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// The wasmscheduling service definition.
// go:plugin type=plugin version=1
type WasmScheduling interface {
	Filter(context.Context, FilterRequest) (FilterReply, error)
}
